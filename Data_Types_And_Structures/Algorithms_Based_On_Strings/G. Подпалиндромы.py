def find_podpalindrom(text):
    # Изменяем текст, добавляя символ "#" между всеми символами и в начале/конце
    changed_text = "#" + "#".join(text) + "#"

    n = len(changed_text)  # Длина измененного текста
    p = [0] * n  # Массив для хранения радиусов палиндромов
    mid = 0  # Центральная позиция текущего палиндрома
    right = 0  # Правая граница текущего палиндрома
    palindr = 0  # Счетчик палиндромов

    # Проходим по всем символам измененного текста
    for i in range(n):
        mirror = 2 * mid - i  # Находим зеркальную позицию для текущего символа

        # Если текущая позиция находится внутри правой границы,
        # устанавливаем начальный радиус из зеркальной позиции
        if i < right:
            p[i] = min(right - i, p[mirror])

        # Расширяем палиндром, пока условие выполняется
        while (i + p[i] + 1 < n
               and i - p[i] - 1 >= 0
               and changed_text[i + p[i] + 1] == changed_text[i - p[i] - 1]):
            p[i] += 1

        # Если мы расширились за правую границу, обновляем mid и right
        if i + p[i] > right:
            mid = i
            right = i + p[i]

        # Увеличиваем счетчик палиндромов, учитывая различные случаи
        palindr += (p[i] + 1) // 2

    return palindr  # Возвращаем общее количество палиндромов


text = input()
res = find_podpalindrom(text)

print(res)
