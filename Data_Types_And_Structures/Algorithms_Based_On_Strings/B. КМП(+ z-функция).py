def KMP_z_function(s):
    n = len(s)  # Длина строки
    z = [0] * n  # Инициализируем Z-функцию нулями
    left, right = 0, 0  # Границы интервала

    for i in range(1, n):  # Итерируем по всем позициям в строке, начиная со второй, т.к. z[0] всегда 0
        # Вычисляем начальное значение z[i], используя уже известные значения
        k = max(0, min(z[i - left], right - i))

        # Пытаемся увеличить z[i], сравнивая символы
        while i + k < n and s[k] == s[i + k]:
            k += 1

        z[i] = k  # Сохраняем вычисленное значение

        # Обновляем границы интервала [left, right], если это необходимо
        if i + z[i] > right:
            left, right = i, i + z[i]

    return z


t = input()
s = input()

# разделитель '#'
p = KMP_z_function(s + '#' + t)

for i in range(len(s) + 1, len(s) + len(t) + 1):
    # Если значение Z-функции для текущей позиции равно длине образца,
    # то это означает, что образец найден в тексте, начиная с позиции i
    if p[i] == len(s):
        # Выводим индекс начала вхождения образца в тексте.
        # Сдвиг вычисляется как i - (длина образца) - 1
        print(i - len(s) - 1, end=' ')

print()
