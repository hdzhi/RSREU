import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk, ImageEnhance, ImageFilter
import os


class ModernImageEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("Modern Image Editor")
        self.root.geometry("1100x750")
        self.root.configure(bg='#2d2d2d')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è ttk
        self.style = ttk.Style()
        self.style.theme_use('clam')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        self.bg_color = '#2d2d2d'
        self.panel_color = '#3d3d3d'
        self.accent_color = '#4a6d7c'
        self.text_color = '#ffffff'
        self.slider_color = '#5a8ca8'

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
        self.style.configure('TFrame', background=self.bg_color)
        self.style.configure('TLabel', background=self.panel_color, foreground=self.text_color)
        self.style.configure('TButton', background=self.accent_color, foreground=self.text_color,
                             borderwidth=1, font=('Segoe UI', 10))
        self.style.map('TButton',
                       background=[('active', '#5a8ca8'), ('pressed', '#3a5d6c')])
        self.style.configure('TScale', background=self.panel_color, troughcolor='#4d4d4d',
                             foreground=self.text_color)

        self.image = None
        self.original_image = None
        self.display_image = None
        self.filename = None

        self.create_widgets()

    def create_widgets(self):
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.top_panel = ttk.Frame(self.root, padding=10)
        self.top_panel.pack(side=tk.TOP, fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏)
        self.open_btn = ttk.Button(self.top_panel, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å", command=self.open_image)
        self.open_btn.pack(side=tk.LEFT, padx=5)

        self.save_btn = ttk.Button(self.top_panel, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_image)
        self.save_btn.pack(side=tk.LEFT, padx=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(self.top_panel, orient=tk.VERTICAL).pack(side=tk.LEFT, padx=10, fill=tk.Y)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        self.reset_btn = ttk.Button(self.top_panel, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", command=self.reset_image)
        self.reset_btn.pack(side=tk.LEFT, padx=5)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.main_panel = ttk.Frame(self.root)
        self.main_panel.pack(fill=tk.BOTH, expand=True)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞
        self.control_panel = ttk.Frame(self.main_panel, width=250, style='TFrame')
        self.control_panel.pack(side=tk.RIGHT, fill=tk.Y, padx=5, pady=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_title = ttk.Label(self.control_panel, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                                   font=('Segoe UI', 11, 'bold'), style='TLabel')
        controls_title.pack(pady=(10, 15), fill=tk.X)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_control = ttk.Notebook(self.control_panel)
        self.tab_control.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –í–∫–ª–∞–¥–∫–∞ "–û—Å–Ω–æ–≤–Ω—ã–µ"
        self.basic_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.basic_tab, text="–û—Å–Ω–æ–≤–Ω—ã–µ")

        # –Ø—Ä–∫–æ—Å—Ç—å
        self.create_slider_control(self.basic_tab, "–Ø—Ä–∫–æ—Å—Ç—å", "brightness", 0, 2, 1)

        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        self.create_slider_control(self.basic_tab, "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", "contrast", 0, 2, 1)

        # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
        self.create_slider_control(self.basic_tab, "–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å", "saturation", 0, 2, 1)

        # –†–µ–∑–∫–æ—Å—Ç—å
        self.create_slider_control(self.basic_tab, "–†–µ–∑–∫–æ—Å—Ç—å", "sharpness", 0, 2, 1)

        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_frame = ttk.Frame(self.main_panel)
        self.image_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –•–æ–ª—Å—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.canvas_container = ttk.Frame(self.image_frame)
        self.canvas_container.pack(fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(self.canvas_container, bg='#3d3d3d', highlightthickness=0)
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.scroll_y = ttk.Scrollbar(self.canvas_container, orient=tk.VERTICAL, command=self.canvas.yview)
        self.scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        self.scroll_x = ttk.Scrollbar(self.image_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

        self.canvas.configure(yscrollcommand=self.scroll_y.set, xscrollcommand=self.scroll_x.set)
        self.canvas.bind('<Configure>', lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ttk.Frame(self.root, height=25)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        self.status_label = ttk.Label(self.status_bar, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", relief=tk.SUNKEN)
        self.status_label.pack(fill=tk.X)

    def create_slider_control(self, parent, label_text, var_name, from_, to, default):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª–∑—É–Ω–∫–æ–º"""
        frame = ttk.Frame(parent)
        frame.pack(fill=tk.X, padx=5, pady=8)

        label = ttk.Label(frame, text=label_text, font=('Segoe UI', 9))
        label.pack(anchor=tk.W)

        slider_frame = ttk.Frame(frame)
        slider_frame.pack(fill=tk.X)

        # –ü–æ–ª–∑—É–Ω–æ–∫
        slider = ttk.Scale(slider_frame, from_=from_, to=to, value=default,
                           command=self.update_image)
        slider.pack(fill=tk.X, expand=True)

        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ttk.Label(slider_frame, text=str(default), width=4)
        value_label.pack(side=tk.RIGHT, padx=(5, 0))

        # –ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –º–µ—Ç–∫–∏
        slider.bind("<Motion>", lambda e, lbl=value_label: lbl.config(text=f"{slider.get():.1f}"))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        setattr(self, f"{var_name}_slider", slider)
        setattr(self, f"{var_name}_value", value_label)

    def open_image(self):
        filetypes = [("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.gif")]
        self.filename = filedialog.askopenfilename(title="–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", filetypes=filetypes)

        if self.filename:
            try:
                self.image = Image.open(self.filename)
                self.original_image = self.image.copy()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
                self.status_label.config(
                    text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(self.filename)} | –†–∞–∑–º–µ—Ä: {self.image.width}x{self.image.height}")

                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.display_image = self.resize_image(self.image)
                self.update_canvas()
            except Exception as e:
                self.status_label.config(text=f"–û—à–∏–±–∫–∞: {str(e)}")

    def resize_image(self, image):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        canvas_width = self.canvas.winfo_width() - 20
        canvas_height = self.canvas.winfo_height() - 20

        # –ï—Å–ª–∏ —Ö–æ–ª—Å—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if canvas_width <= 1 or canvas_height <= 1:
            canvas_width = 800
            canvas_height = 600

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        img_width, img_height = image.size
        ratio = min(canvas_width / img_width, canvas_height / img_height)
        new_size = (int(img_width * ratio), int(img_height * ratio))
        return image.resize(new_size, Image.Resampling.LANCZOS)

    def update_canvas(self):
        if self.display_image:
            self.canvas.delete("all")
            tk_image = ImageTk.PhotoImage(self.display_image)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
            self.canvas.image = tk_image

            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–µ —Ö–æ–ª—Å—Ç–∞
            img_width = tk_image.width()
            img_height = tk_image.height()

            self.canvas.create_image(
                self.canvas.winfo_width() // 2,
                self.canvas.winfo_height() // 2,
                image=tk_image,
                anchor=tk.CENTER
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            self.canvas.configure(scrollregion=(
                0, 0,
                max(tk_image.width(), self.canvas.winfo_width()),
                max(tk_image.height(), self.canvas.winfo_height())
            ))

    def update_image(self, event=None):
        if self.image:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edited_image = self.original_image.copy()

                # –Ø—Ä–∫–æ—Å—Ç—å
                brightness = self.brightness_slider.get()
                enhancer = ImageEnhance.Brightness(edited_image)
                edited_image = enhancer.enhance(brightness)

                # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
                contrast = self.contrast_slider.get()
                enhancer = ImageEnhance.Contrast(edited_image)
                edited_image = enhancer.enhance(contrast)

                # –ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
                saturation = self.saturation_slider.get()
                enhancer = ImageEnhance.Color(edited_image)
                edited_image = enhancer.enhance(saturation)

                # –†–µ–∑–∫–æ—Å—Ç—å
                sharpness = self.sharpness_slider.get()
                enhancer = ImageEnhance.Sharpness(edited_image)
                edited_image = enhancer.enhance(sharpness)

                self.image = edited_image
                self.display_image = self.resize_image(self.image)
                self.update_canvas()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
                if self.filename:
                    self.status_label.config(
                        text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {os.path.basename(self.filename)} | –Ø—Ä–∫–æ—Å—Ç—å: {brightness:.1f} | –ö–æ–Ω—Ç—Ä–∞—Å—Ç: {contrast:.1f}")
            except Exception as e:
                self.status_label.config(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

    def reset_image(self):
        if self.original_image:
            self.brightness_slider.set(1)
            self.contrast_slider.set(1)
            self.saturation_slider.set(1)
            self.sharpness_slider.set(1)
            self.image = self.original_image.copy()
            self.display_image = self.resize_image(self.image)
            self.update_canvas()
            self.status_label.config(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ: {os.path.basename(self.filename)}")

    def save_image(self):
        if self.image:
            filetypes = [
                ("JPEG files", "*.jpg;*.jpeg"),
                ("PNG files", "*.png"),
                ("BMP files", "*.bmp"),
                ("All files", "*.*")
            ]
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫",
                filetypes=filetypes,
                defaultextension=".jpg"
            )

            if filename:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    ext = os.path.splitext(filename)[1].lower()
                    if ext in ('.jpg', '.jpeg'):
                        self.image.save(filename, "JPEG", quality=95)
                    elif ext == '.png':
                        self.image.save(filename, "PNG")
                    elif ext == '.bmp':
                        self.image.save(filename, "BMP")
                    else:
                        self.image.save(filename + ".jpg", "JPEG", quality=95)

                    self.status_label.config(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {os.path.basename(filename)}")
                except Exception as e:
                    self.status_label.config(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")


if __name__ == "__main__":
    root = tk.Tk()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        root.iconbitmap(default='icon.ico')
    except:
        pass

    app = ModernImageEditor(root)
    root.mainloop()